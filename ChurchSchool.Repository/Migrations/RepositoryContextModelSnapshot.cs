// <auto-generated />
using ChurchSchool.Domain.Enum;
using ChurchSchool.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace ChurchSchool.Repository.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Address", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Details");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<string>("Neighborhood");

                    b.Property<Guid?>("PersonId");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<string>("State");

                    b.Property<string>("StreetName");

                    b.Property<int>("StreetNumber");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Course", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CourseConfigurationId");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CourseConfigurationId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.CourseClass", b =>
                {
                    b.Property<Guid>("ScholarTermId");

                    b.Property<Guid>("CurriculumId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ScholarTermId", "CurriculumId");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.CourseClass_Student", b =>
                {
                    b.Property<Guid>("CourseClassId");

                    b.Property<Guid>("EnrolledStudentId");

                    b.Property<Guid?>("EnrollmentId");

                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("RelatedClassCurriculumId");

                    b.Property<Guid?>("RelatedClassScholarTermId");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("CourseClassId", "EnrolledStudentId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("RelatedClassScholarTermId", "RelatedClassCurriculumId");

                    b.ToTable("CourseClass_Student");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.CourseClass_Subject", b =>
                {
                    b.Property<Guid>("CourseClassId");

                    b.Property<Guid>("SubjectId");

                    b.Property<Guid>("ProfessorId");

                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("RelatedClassCurriculumId");

                    b.Property<Guid?>("RelatedClassScholarTermId");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("CourseClassId", "SubjectId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("RelatedClassScholarTermId", "RelatedClassCurriculumId");

                    b.ToTable("CourseClass_Subject");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.CourseConfiguration", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CourseId");

                    b.Property<Guid>("CurriculumId");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsCurrentConfiguration");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Curriculum", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Curriculum_Subject", b =>
                {
                    b.Property<Guid>("CurriculumId");

                    b.Property<Guid>("SubjectId");

                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("CurriculumId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Curriculum_Subject");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Email", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Enrollment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CourseId");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StudentId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Frequency", b =>
                {
                    b.Property<Guid>("ScholarTermId");

                    b.Property<Guid>("SubjectId");

                    b.Property<Guid>("EnrollmentId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("ScholarTermId", "SubjectId", "EnrollmentId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Frequencies");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Grade", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("EnrollmentId");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<Guid?>("ScholarTermId");

                    b.Property<Guid?>("SubjectId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("ScholarTermId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.GradeHistory", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CurrentGradeId");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CurrentGradeId");

                    b.ToTable("GradeHistory");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Person", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<Guid?>("EmailId");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<int>("Sex");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.PersonDocument", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DocumentNumber");

                    b.Property<int>("DocumentTypeId");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<bool>("IsRequired");

                    b.Property<DateTime>("IssuingDate");

                    b.Property<string>("IssuingEntity");

                    b.Property<Guid?>("PersonId");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonDocument");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.ScholarTerm", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("FinishDate");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ScholarTerms");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Structs.Phone", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaCode");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<string>("Number");

                    b.Property<Guid?>("PersonId");

                    b.Property<DateTime?>("RemovedDate");

                    b.Property<DateTime?>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Professor", b =>
                {
                    b.HasBaseType("ChurchSchool.Domain.Entities.Person");


                    b.ToTable("Professor");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Student", b =>
                {
                    b.HasBaseType("ChurchSchool.Domain.Entities.Person");


                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Address", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Course", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.CourseConfiguration")
                        .WithMany("RelatedCourses")
                        .HasForeignKey("CourseConfigurationId");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.CourseClass", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Curriculum", "Curriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChurchSchool.Domain.Entities.ScholarTerm", "ScholarTerm")
                        .WithMany()
                        .HasForeignKey("ScholarTermId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.CourseClass_Student", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId");

                    b.HasOne("ChurchSchool.Domain.Entities.CourseClass", "RelatedClass")
                        .WithMany()
                        .HasForeignKey("RelatedClassScholarTermId", "RelatedClassCurriculumId");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.CourseClass_Subject", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChurchSchool.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChurchSchool.Domain.Entities.CourseClass", "RelatedClass")
                        .WithMany()
                        .HasForeignKey("RelatedClassScholarTermId", "RelatedClassCurriculumId");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.CourseConfiguration", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Curriculum", "RelatedCurriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Curriculum_Subject", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Curriculum", "RelatedCurriculum")
                        .WithMany()
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChurchSchool.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("ChurchSchool.Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Frequency", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChurchSchool.Domain.Entities.ScholarTerm", "ScholarTerm")
                        .WithMany()
                        .HasForeignKey("ScholarTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChurchSchool.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Grade", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Enrollment", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId");

                    b.HasOne("ChurchSchool.Domain.Entities.ScholarTerm", "ScholarTerm")
                        .WithMany()
                        .HasForeignKey("ScholarTermId");

                    b.HasOne("ChurchSchool.Domain.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.GradeHistory", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Grade", "CurrentGrade")
                        .WithMany("History")
                        .HasForeignKey("CurrentGradeId");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.Person", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Entities.PersonDocument", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Person")
                        .WithMany("PersonDocuments")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("ChurchSchool.Domain.Structs.Phone", b =>
                {
                    b.HasOne("ChurchSchool.Domain.Entities.Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
